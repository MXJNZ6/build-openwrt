name: 通用设备编译固件

on:
  repository_dispatch:
  workflow_dispatch:
    inputs:
      source_branch:
        description: "Select the source branch"
        required: false
        default: "openwrt-main"
        type: choice
        options:
          - openwrt-main
          - lede-master
          - immortalwrt-master
          - Lienol-master
      
env:
  FEEDS_CONF: config/${{ inputs.source_branch }}/feeds.conf.default
  CONFIG_FILE: config/${{ inputs.source_branch }}/config
  DIY_P1_SH: config/${{ inputs.source_branch }}/diy-part1.sh
  DIY_P2_SH: config/${{ inputs.source_branch }}/diy-part2.sh
  UPLOAD_BIN_DIR: true
  UPLOAD_FIRMWARE: true
  UPLOAD_RELEASE: true
  TZ: Asia/Shanghai

jobs:
  build:
    runs-on: ubuntu-22.04
    if: ${{ github.event.repository.owner.id }} == ${{ github.event.sender.id }}

    steps:
      - name: Checkout
        uses: actions/checkout@main

      - name: Initialization environment
        id: init
        env:
          DEBIAN_FRONTEND: noninteractive
        run: |
          docker rmi `docker images -q`
          [[ -n "${AGENT_TOOLSDIRECTORY}" ]] && sudo rm -rf "${AGENT_TOOLSDIRECTORY}"
          sudo rm -rf /usr/share/dotnet /etc/apt/sources.list.d /usr/local/lib/android 2>/dev/null
          sudo -E apt-get -y update
          sudo -E apt-get -y purge azure-cli ghc* zulu* llvm* firefox google* dotnet* powershell openjdk* mongodb* moby* || true
          sudo -E apt-get -y install $(curl -fsSL https://is.gd/depend_ubuntu2204_openwrt)
          sudo -E apt-get -y install python3 python3-pip python3-dev python3-setuptools
          sudo -E pip3 install netifaces
          sudo -E systemctl daemon-reload
          sudo -E apt-get -y autoremove --purge
          sudo -E apt-get clean
          # 创建/mnt下的工作目录并设置权限
          sudo mkdir -p /mnt/workdir
          sudo chown -R $USER:$GROUPS /mnt/workdir
          sudo chmod -R 755 /mnt/workdir
          sudo timedatectl set-timezone "${TZ}"
          echo "WORKDIR=/mnt/workdir" >> $GITHUB_ENV
          echo "status=success" >> $GITHUB_OUTPUT
          # 检查磁盘空间
          df -h

      - name: Clone source code [ ${{ inputs.source_branch }} ]
        id: codes
        working-directory: ${{ env.WORKDIR }}
        if: ${{ steps.init.outputs.status }} == 'success' && !cancelled()
        run: |
          # Set up compilation source code
          if [[ "${{ inputs.source_branch }}" == *"openwrt"* ]]; then
              REPO_URL="https://github.com/openwrt/openwrt"
              REPO_BRANCH="main"
              TAGS_NAME="official"
          elif [[ "${{ inputs.source_branch }}" == *"lede"* ]]; then
              REPO_URL="https://github.com/coolsnowwolf/lede"
              REPO_BRANCH="master"
              TAGS_NAME="lede"
          elif [[ "${{ inputs.source_branch }}" == *"immortalwrt"* ]]; then
              REPO_URL="https://github.com/immortalwrt/immortalwrt"
              REPO_BRANCH="master"
              TAGS_NAME="immortalwrt"
          elif [[ "${{ inputs.source_branch }}" == *"Lienol"* ]]; then
              REPO_URL="https://github.com/Lienol/openwrt"
              REPO_BRANCH="22.03"
              TAGS_NAME="Lienol"
          else
              echo "Unknown source code repository."
              exit 1
          fi
          # Clone source code
          git clone -q --single-branch --depth=1 --branch=${REPO_BRANCH} ${REPO_URL} openwrt
          ln -sf ${{ env.WORKDIR }}/openwrt ${GITHUB_WORKSPACE}/openwrt
          # Set output information
          echo "build_tag=OpenWrt_${TAGS_NAME}_${{ inputs.openwrt_storage }}_$(date +"%Y.%m")" >> ${GITHUB_OUTPUT}
          echo -e "REPO_URL: [ ${REPO_URL} ]\nREPO_BRANCH: [ ${REPO_BRANCH} ]\nTAGS_NAME: [ ${TAGS_NAME} ]"
          df -h
          echo "status=success" >> ${GITHUB_OUTPUT}

      - name: Load custom feeds
        run: |
          [[ -f "${FEEDS_CONF}" ]] && cp -f ${FEEDS_CONF} ${{ env.WORKDIR }}/openwrt/feeds.conf.default
          chmod +x ${DIY_P1_SH}
          cd ${{ env.WORKDIR }}/openwrt/
          ${GITHUB_WORKSPACE}/${DIY_P1_SH}

      - name: Update feeds
        run: cd ${{ env.WORKDIR }}/openwrt/ && ./scripts/feeds update -a

      - name: Install feeds
        run: cd ${{ env.WORKDIR }}/openwrt/ && ./scripts/feeds install -a

      - name: Load custom configuration
        run: |
          [[ -d "files" ]] && mv -f files ${{ env.WORKDIR }}/openwrt/files
          [[ -e "${CONFIG_FILE}" ]] && cp -f ${CONFIG_FILE} ${{ env.WORKDIR }}/openwrt/.config
          chmod +x ${DIY_P2_SH}
          cd ${{ env.WORKDIR }}/openwrt/
          ${GITHUB_WORKSPACE}/${DIY_P2_SH}

      - name: Download package
        id: package
        run: |
          cd ${{ env.WORKDIR }}/openwrt/
          make defconfig
          make download -j8
          find dl -size -1024c -exec ls -l {} \;
          find dl -size -1024c -exec rm -f {} \;
          df -h

      - name: Compile the OpenWrt
        id: compile
        run: |
          cd ${{ env.WORKDIR }}/openwrt/
          echo -e "$(nproc) thread compile"
          make -j$(($(nproc) + 1)) V=s || make -j1 || make -j1 V=s
          echo "status=success" >> ${GITHUB_OUTPUT}
          df -h

      - name: Check space usage
        if: (!cancelled())
        run: df -h

      - name: Upload bin directory
        uses: actions/upload-artifact@main
        if: steps.compile.outputs.status == 'success' && env.UPLOAD_BIN_DIR == 'true'
        with:
          name: OpenWrt_bin${{ env.DEVICE_NAME }}${{ env.FILE_DATE }}
          path: ${{ env.WORKDIR }}/openwrt/bin

      - name: Organize files
        id: organize
        if: env.UPLOAD_FIRMWARE == 'true' && !cancelled()
        run: |
          cd ${{ env.WORKDIR }}/openwrt/bin/targets/*/*
          rm -rf packages
          CONFIG_FILE_NAME="config_$(date +"%Y%m%d").config"
          cp ${{ env.WORKDIR }}/openwrt/.config $CONFIG_FILE_NAME
          echo "FIRMWARE=$PWD" >> $GITHUB_ENV
          echo "CONFIG_FILE=$CONFIG_FILE_NAME" >> $GITHUB_ENV
          echo "DATE=$(date "+%Y-%m-%d %H:%M:%S")" >> $GITHUB_ENV
          echo "status=success" >> $GITHUB_OUTPUT

      - name: Generate release tag
        id: tag
        if: env.UPLOAD_RELEASE == 'true' && !cancelled()
        run: |
          echo "release_tag=$(date +"%Y.%m.%d-%H%M")" >> $GITHUB_OUTPUT
          touch release.txt
          echo "📅 编译时间: ${{ env.DATE }}" >> release.txt
          echo "🔧 配置文件: ${{ env.CONFIG_FILE }}" >> release.txt
          echo "📦 文件信息:" >> release.txt
          echo "- 固件镜像 (*.img.gz)" >> release.txt
          echo "- 配置文件 (.config)" >> release.txt
          echo "status=success" >> $GITHUB_OUTPUT

      - name: Upload firmware to release
        uses: softprops/action-gh-release@v1
        if: steps.tag.outputs.status == 'success' && !cancelled()
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ steps.tag.outputs.release_tag }}
          body_path: release.txt
          files: |
            ${{ env.FIRMWARE }}/*
            ${{ env.FIRMWARE }}/${{ env.CONFIG_FILE }}
            
      - name: Delete workflow runs
        uses: GitRML/delete-workflow-runs@main
        with:
          retain_days: 1
          keep_minimum_runs: 3
          token: ${{ secrets.GH_TOKEN }}
          body: |
            OpenWrt_immortalwrt 最新编译版本
            📦 文件信息:
            - 固件镜像 (*.img.gz)
            - 配置文件 (.config)
